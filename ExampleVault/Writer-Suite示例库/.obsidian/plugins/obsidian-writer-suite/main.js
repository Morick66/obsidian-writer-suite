/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/view/tocView.ts
var import_obsidian5 = require("obsidian");

// src/helper/WordCount.ts
var import_obsidian = require("obsidian");
var WordCounter = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async getWordCount(file) {
    const fileContents = await this.plugin.app.vault.read(file);
    const countPunctuation = this.plugin.settings.countPunctuation;
    const words = fileContents.replace(/\s/g, "");
    if (!countPunctuation) {
      const noPunctuation = words.replace(/[\p{P}\p{S}]/gu, "");
      return noPunctuation.length;
    }
    return words.length;
  }
  async getTotalWordCount(folder) {
    let totalWordCount = 0;
    const calculateWordCount = async (folder2) => {
      for (const child of folder2.children) {
        if (child instanceof import_obsidian.TFile) {
          const wordCount = await this.getWordCount(child);
          totalWordCount += wordCount;
        } else if (child instanceof import_obsidian.TFolder) {
          await calculateWordCount(child);
        }
      }
    };
    await calculateWordCount(folder);
    return totalWordCount;
  }
};

// src/model/deleteModal.ts
var import_obsidian2 = require("obsidian");
var ConfirmDeleteModal = class extends import_obsidian2.Modal {
  constructor(app, fileOrFolder, view, refreshCallback) {
    super(app);
    this.fileOrFolder = fileOrFolder;
    this.view = view;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { cls: "pluginModal", text: "\u786E\u8BA4\u5220\u9664" });
    const fileType = this.fileOrFolder instanceof import_obsidian2.TFile ? "\u6587\u4EF6" : "\u6587\u4EF6\u5939";
    contentEl.createEl("span", { text: `\u5220\u9664${fileType}\u2014\u2014` });
    const strongtext = contentEl.createEl("span", { text: `${this.fileOrFolder.name.replace(/\.md$/, "")}` });
    strongtext.style.fontWeight = "bold";
    strongtext.style.color = "var(--bold-color)";
    new import_obsidian2.ButtonComponent(contentEl).setButtonText("\u5220\u9664").setCta().onClick(async () => {
      await this.app.vault.trash(this.fileOrFolder, false);
      this.close();
    });
    new import_obsidian2.ButtonComponent(contentEl).setButtonText("\u53D6\u6D88").onClick(() => {
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/model/newChapterModal.ts
var import_obsidian3 = require("obsidian");
var NewChapterModal = class extends import_obsidian3.Modal {
  constructor(app, folder, view, itemType, refreshCallback) {
    super(app);
    this.folder = folder;
    this.view = view;
    this.itemType = itemType;
    this.refreshCallback = refreshCallback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { cls: "pluginModal", text: `\u65B0\u5EFA${this.itemType}` });
    const input = new import_obsidian3.TextComponent(contentEl);
    input.setPlaceholder(`${this.itemType}\u540D\u79F0`);
    new import_obsidian3.ButtonComponent(contentEl).setButtonText("\u521B\u5EFA").setCta().onClick(async () => {
      const fileName = input.getValue();
      if (!fileName) {
        new import_obsidian3.Notice(`${this.itemType}\u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A`);
        return;
      }
      const filePath = `${this.folder.path}/${fileName}.md`;
      await this.app.vault.create(filePath, "");
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/model/newItemModal.ts
var import_obsidian4 = require("obsidian");
var NewItemModal = class extends import_obsidian4.Modal {
  constructor(app, folder, view, refreshCallback) {
    super(app);
    this.folder = folder;
    this.view = view;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("p", { text: "\u65B0\u5EFA\u5377/\u7AE0\u8282", cls: "modal-title" });
    const nameInput = new import_obsidian4.TextComponent(contentEl);
    nameInput.setPlaceholder("\u8F93\u5165\u5377/\u7AE0\u8282\u540D\u79F0...");
    const createFolderButton = new import_obsidian4.ButtonComponent(contentEl);
    createFolderButton.setButtonText("\u65B0\u5377").onClick(async () => {
      const name = nameInput.getValue();
      if (name) {
        await this.app.vault.createFolder(`${this.folder.path}/${name}`);
        new import_obsidian4.Notice(`Folder '${name}' created.`);
        this.close();
      }
    });
    const createFileButton = new import_obsidian4.ButtonComponent(contentEl);
    createFileButton.setButtonText("\u65B0\u7AE0\u8282").onClick(async () => {
      const name = nameInput.getValue();
      if (name) {
        const filePath = `${this.folder.path}/${name}.md`;
        await this.app.vault.create(filePath, "");
        new import_obsidian4.Notice(`File '${name}.md' created.`);
        this.close();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/view/tocView.ts
var VIEW_TYPE_FILE_LIST = "file-list-view";
var TocView = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.wordCounter = new WordCounter(plugin);
    this.icon = "list";
  }
  getViewType() {
    return VIEW_TYPE_FILE_LIST;
  }
  getDisplayText() {
    return "File List";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const title = container.createEl("h2", { text: "" });
    title.className = "view-title";
    const floatingButton = container.createEl("button", {
      cls: "floating-button"
    });
    (0, import_obsidian5.setIcon)(floatingButton, "plus");
    floatingButton.style.display = "none";
    floatingButton.title = "\u65B0\u5EFA\u7AE0\u8282/\u5377";
    floatingButton.addEventListener("click", () => {
      this.showNewItemModal();
    });
    this.refresh();
  }
  // 浮动按钮的显示
  toggleFloatingButton() {
    const floatingButton = this.containerEl.querySelector(".floating-button");
    if (floatingButton) {
      floatingButton.style.display = this.plugin.folderPath !== "" ? "block" : "none";
    }
  }
  // 更新标题
  updateTitle() {
    const title = this.containerEl.querySelector(".view-title");
    if (title) {
      title.textContent = this.plugin.folderPath;
    }
  }
  async refresh() {
    const container = this.containerEl.children[1];
    const existingContent = container.querySelectorAll(".folder-item, ul, p, .info-container");
    existingContent.forEach((el) => el.remove());
    const novelFolderPath = this.plugin.folderPath + "/\u5C0F\u8BF4\u6587\u7A3F";
    const novelFolder = this.app.vault.getAbstractFileByPath(novelFolderPath);
    const shortStoryFilePath = this.plugin.folderPath + "/\u5C0F\u8BF4\u6B63\u6587.md";
    const shortStoryFile = this.app.vault.getAbstractFileByPath(shortStoryFilePath);
    if (novelFolder && novelFolder instanceof import_obsidian5.TFolder) {
      this.displayItems(container, novelFolder);
      this.toggleFloatingButton();
    } else if (shortStoryFile && shortStoryFile instanceof import_obsidian5.TFile) {
      this.displayOutline(container, shortStoryFile);
    } else {
      this.displayInfo(container);
    }
  }
  displayInfo(container) {
    const { settings } = this.plugin;
    const infoContainer = container.createDiv({ cls: "info-container" });
    if (settings.picturePath) {
      const imagePath = `${settings.picturePath}`;
      infoContainer.createEl("img", {
        attr: { alt: imagePath, src: imagePath },
        cls: "user-avatar"
      });
    }
    infoContainer.createEl("h1", { text: settings.name, cls: "user-name" });
    this.getBookCountAndTotalWords().then(({ novelCount, shortStoryCount }) => {
      const novelText = novelCount > 0 ? `${novelCount}` : "0";
      const shortStoryText = shortStoryCount > 0 ? `${shortStoryCount}` : "0";
      const infoText = [
        `\u957F\u7BC7\u5C0F\u8BF4: ${novelText}`,
        `\u77ED\u7BC7\u5C0F\u8BF4: ${shortStoryText}`
      ].join(" | ");
      infoContainer.createDiv({ text: infoText, cls: "book-info" });
    });
  }
  // 异步方法，用于获取书籍数量和总字数
  async getBookCountAndTotalWords() {
    const rootFolder = this.app.vault.getRoot();
    let novelCount = 0;
    let shortStoryCount = 0;
    const processFolder = async (folder) => {
      for (const file of folder.children) {
        if (file instanceof import_obsidian5.TFile && file.path.endsWith("\u4FE1\u606F.md")) {
          const content = await this.app.vault.read(file);
          const type = this.getFileType(content);
          if (type === "novel")
            novelCount++;
          if (type === "short-story")
            shortStoryCount++;
        } else if (file instanceof import_obsidian5.TFolder) {
          await processFolder(file);
        }
      }
    };
    await processFolder(rootFolder);
    return { novelCount, shortStoryCount };
  }
  // 辅助方法，从信息.md的内容中提取type
  getFileType(content) {
    const match = content.match(/type: (novel|short-story)/);
    return match ? match[1] : null;
  }
  displayItems(container, folder) {
    folder.children.forEach((child) => {
      const childContainer = container.createDiv({ cls: "folder-item" });
      if (child instanceof import_obsidian5.TFile) {
        this.displayFile(childContainer, child);
      } else if (child instanceof import_obsidian5.TFolder) {
        this.displayFolder(childContainer, child);
      }
    });
  }
  displayFolder(container, folder) {
    const folderItem = container.createDiv({ cls: "folder-item" });
    const folderHeader = folderItem.createEl("div", { cls: "folder-header" });
    const folderName = folderHeader.createEl("div", { cls: "folder-name" });
    const folderIcon = folderName.createEl("span");
    (0, import_obsidian5.setIcon)(folderIcon, "folder-open");
    folderName.createSpan({ text: folder.name });
    const tocButton = folderHeader.createEl("div", { cls: "tocButton" });
    const addButton = tocButton.createEl("button");
    (0, import_obsidian5.setIcon)(addButton, "plus");
    const deleteButton = tocButton.createEl("button");
    (0, import_obsidian5.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u6587\u4EF6\u5939";
    addButton.title = "\u65B0\u5EFA\u7AE0\u8282";
    addButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.showNewChapterModal(folder);
    });
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(folder);
    });
    const fileList = folderItem.createEl("ul", { cls: "file-list" });
    fileList.style.display = "block";
    folderHeader.addEventListener("click", () => {
      if (fileList.style.display === "none") {
        fileList.style.display = "block";
        (0, import_obsidian5.setIcon)(folderIcon, "folder-open");
      } else {
        fileList.style.display = "none";
        (0, import_obsidian5.setIcon)(folderIcon, "folder-minus");
      }
    });
    const sortedChildren = folder.children.sort((a, b) => {
      if (a instanceof import_obsidian5.TFile && b instanceof import_obsidian5.TFile) {
        return a.stat.ctime - b.stat.ctime;
      } else if (a instanceof import_obsidian5.TFolder && b instanceof import_obsidian5.TFolder) {
        return a.name.localeCompare(b.name);
      } else {
        return a instanceof import_obsidian5.TFolder ? -1 : 1;
      }
    });
    sortedChildren.forEach((file) => {
      if (file instanceof import_obsidian5.TFile) {
        this.displayFile(fileList, file);
      } else if (file instanceof import_obsidian5.TFolder) {
        this.displayFolder(fileList.createEl("li"), file);
      }
    });
  }
  async displayFile(container, file) {
    const fileItem = container.createEl("li", { cls: "chapter-title" });
    const fileHeader = fileItem.createEl("div", { cls: "file-header" });
    const fileIcon = fileHeader.createEl("span");
    (0, import_obsidian5.setIcon)(fileIcon, "file-text");
    const fileName = fileHeader.createEl("span");
    const wordCount = await this.wordCounter.getWordCount(file);
    fileName.textContent = `${file.name.replace(/\.md$/, "")}`;
    const deleteButton = fileItem.createEl("button", { cls: "deleteButton" });
    fileItem.createEl("div", { cls: "word-count", text: `${wordCount}` });
    (0, import_obsidian5.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u6587\u4EF6";
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(file);
    });
    fileItem.addEventListener("click", () => {
      this.app.workspace.openLinkText(file.path, "", false);
    });
    fileItem.dataset.path = file.path;
  }
  // 展示大纲的方法
  async displayOutline(container, file) {
    const outline = await this.getOutline(file);
    this.renderOutlineList(container, outline, 1, file);
  }
  // 递归渲染大纲列表的方法
  async renderOutlineList(container, titles, level, file) {
    const listType = level === 1 ? "ul" : "ol";
    const list = container.createEl(listType, { cls: "outline-list" });
    while (titles.length > 0) {
      const title = titles.shift();
      if (title) {
        const [text, nestedTitles] = this.splitTitleAndChildren(title, titles);
        const titleDiv = list.createEl("div", { text });
        titleDiv.className = "outline-title";
        const listItem = list.createEl("li");
        listItem.appendChild(titleDiv);
        listItem.style.paddingLeft = `${10}px`;
        listItem.addEventListener("click", () => this.scrollToTitle(file, title));
        if (nestedTitles.length > 0) {
          this.renderOutlineList(listItem, nestedTitles, level + 1, file);
        }
      }
    }
    container.appendChild(list);
  }
  splitTitleAndChildren(title, remainingTitles) {
    const match = title.match(/^(#+)\s*(.*)/);
    if (match) {
      const headerLevel = match[1].length;
      const text = match[2];
      const nestedTitles = [];
      for (let i = 0; i < remainingTitles.length; i++) {
        const nextTitle = remainingTitles[i];
        const nextMatch = nextTitle.match(/^(#+)\s*(.*)/);
        if (nextMatch) {
          const nextHeaderLevel = nextMatch[1].length;
          if (nextHeaderLevel > headerLevel) {
            nestedTitles.push(nextTitle);
          } else if (nextHeaderLevel <= headerLevel) {
            break;
          }
        }
      }
      remainingTitles.splice(0, nestedTitles.length);
      return [text, nestedTitles];
    } else {
      return [title, []];
    }
  }
  // 定位到文件中的标题位置的方法
  async scrollToTitle(file, title) {
    const fileContent = await this.app.vault.read(file);
    const lines = fileContent.split("\n");
    const titleIndex = lines.findIndex((line) => line.trim() === title);
    if (titleIndex !== -1) {
      const activeLeaf = this.app.workspace.getLeaf();
      if (activeLeaf) {
        const view = activeLeaf.view;
        if (view instanceof import_obsidian5.MarkdownView) {
          const editor = view.editor;
          editor.setCursor({ line: titleIndex, ch: 0 });
          editor.scrollIntoView({ from: { line: titleIndex, ch: 0 }, to: { line: titleIndex, ch: 0 } }, true);
        }
      }
    }
  }
  // 假设的获取文件大纲的方法，需要您根据实际情况实现
  async getOutline(file) {
    const fileContents = await this.app.vault.read(file);
    const lines = fileContents.split("\n");
    const titles = lines.filter((line) => line.startsWith("#")).map((line) => line.trim());
    return titles;
  }
  async updateFile(file) {
    const fileItem = this.containerEl.querySelector(`li[data-path="${file.path}"]`);
    if (fileItem) {
      const fileName = file.name.replace(/\.md$/, "");
      const wordCount = await this.wordCounter.getWordCount(file);
      fileItem.textContent = `${fileName} (${wordCount} words)`;
    }
  }
  async showNewChapterModal(folder) {
    const modal = new NewChapterModal(this.app, folder, this, "\u7AE0\u8282", this.refresh);
    modal.open();
  }
  async showNewItemModal() {
    const rootFolderPath = this.plugin.folderPath + "/\u5C0F\u8BF4\u6587\u7A3F";
    const folder = this.app.vault.getAbstractFileByPath(rootFolderPath);
    if (folder && folder instanceof import_obsidian5.TFolder) {
      const modal = new NewItemModal(this.app, folder, this, this.refresh);
      modal.open();
    } else {
      new import_obsidian5.Notice(`\u6587\u4EF6\u5939\u672A\u53D1\u73B0: ${rootFolderPath}`);
    }
  }
  confirmDelete(fileOrFolder) {
    const modal = new ConfirmDeleteModal(this.app, fileOrFolder, this, this.refresh);
    modal.open();
  }
  async onClose() {
  }
};

// src/view/bookShelfView.ts
var import_obsidian7 = require("obsidian");

// src/model/newBookModal.ts
var import_obsidian6 = require("obsidian");
var NewBookModal = class extends import_obsidian6.Modal {
  constructor(app, folder, view, refreshCallback) {
    super(app);
    this.folder = folder;
    this.view = view;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { cls: "pluginModal", text: "\u65B0\u5EFA\u4E66\u7C4D" });
    const infoForm = contentEl.createDiv({ cls: "info-form" });
    const namelabelEl = infoForm.createEl("div", { cls: "name-label" });
    namelabelEl.createEl("div", { text: "\u4E66\u7C4D\u540D\u79F0", cls: "input-label" });
    const nameInput = new import_obsidian6.TextComponent(namelabelEl);
    nameInput.setPlaceholder("\u5728\u6B64\u8F93\u5165\u4E66\u7C4D\u540D\u79F0");
    const bookTypeLabel = namelabelEl.createEl("div", { text: "\u5C0F\u8BF4\u7C7B\u578B\uFF1A", cls: "option-label" });
    const selectEl = bookTypeLabel.createEl("select", { cls: "book-type-select" });
    selectEl.id = "bookType";
    const novelOption = selectEl.createEl("option", {
      attr: { value: "novel", selected: "selected" }
      // 初始默认选中长篇小说
    });
    novelOption.textContent = "\u957F\u7BC7\u5C0F\u8BF4";
    const shortStoryOption = selectEl.createEl("option", { attr: { value: "short-story" } });
    shortStoryOption.textContent = "\u77ED\u7BC7\u5C0F\u8BF4";
    const desclabelEl = infoForm.createEl("div", { cls: "desc-label" });
    desclabelEl.createEl("div", { text: "\u4E66\u7C4D\u7B80\u4ECB", cls: "input-label" });
    const descInputEl = desclabelEl.createEl("textarea", { cls: "book-description-textarea" });
    descInputEl.placeholder = "\u8BF7\u8F93\u5165\u4E66\u7C4D\u7B80\u4ECB";
    descInputEl.rows = 10;
    descInputEl.style.width = "100%";
    new import_obsidian6.ButtonComponent(contentEl).setButtonText("\u521B\u5EFA").setCta().onClick(async () => {
      const bookName = nameInput.getValue();
      const bookDesc = descInputEl.value;
      let bookType = "novel";
      const selectedType = document.getElementById("bookType");
      bookType = selectedType.value;
      if (bookName.trim() === "") {
        new import_obsidian6.Notice("\u4E66\u7C4D\u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A");
        return;
      }
      const bookFolderPath = `${this.folder.path}/${bookName}`;
      const newFolder = await this.app.vault.createFolder(bookFolderPath);
      if (newFolder) {
        await this.app.vault.create(newFolder.path + "/\u4FE1\u606F.md", `---
type: ${bookType}
---
\u540D\u79F0: ${bookName}
\u7B80\u4ECB: ${bookDesc}`);
        if (bookType === "novel") {
          const novelFolder = await this.app.vault.createFolder(newFolder.path + "/\u5C0F\u8BF4\u6587\u7A3F");
          await this.app.vault.create(novelFolder.path + "/\u672A\u547D\u540D\u7AE0\u8282.md", "");
        } else if (bookType === "short-story") {
          await this.app.vault.create(newFolder.path + "/\u5C0F\u8BF4\u6B63\u6587.md", "");
        }
      }
      new import_obsidian6.Notice("\u4E66\u7C4D\u5DF2\u521B\u5EFA");
      this.close();
    });
    new import_obsidian6.ButtonComponent(contentEl).setButtonText("\u53D6\u6D88").onClick(() => {
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/view/bookShelfView.ts
var VIEW_TYPE_BOOKSHELF = "bookshelf-view";
var BookshelfView = class extends import_obsidian7.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.wordCounter = new WordCounter(plugin);
    this.icon = "book";
  }
  getViewType() {
    return VIEW_TYPE_BOOKSHELF;
  }
  getDisplayText() {
    return "Bookshelf";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const bookList = this.containerEl.createDiv({ cls: "book-list-container" });
    bookList.style.gridTemplateColumns = `repeat(${this.plugin.settings.booksPerRow}, 1fr)`;
    this.toggleFloatingButton();
    await this.refresh();
  }
  toggleFloatingButton() {
    const floatingButton = this.containerEl.createEl("button", { cls: "floating-button" });
    (0, import_obsidian7.setIcon)(floatingButton, "plus");
    floatingButton.title = "\u65B0\u5EFA\u4E66\u7C4D";
    floatingButton.addEventListener("click", () => {
      this.showNewBookModal();
    });
  }
  async refresh() {
    this.containerEl.empty();
    const bookListContainer = this.containerEl.createDiv({ cls: "book-list-container" });
    bookListContainer.style.gridTemplateColumns = `repeat(${this.plugin.settings.booksPerRow}, 1fr)`;
    const rootFolder = "/";
    const folder = this.app.vault.getAbstractFileByPath(rootFolder);
    if (folder instanceof import_obsidian7.TFolder) {
      await this.displayBooks(bookListContainer, folder);
    } else {
      new import_obsidian7.Notice("\u6839\u6587\u4EF6\u5939\u672A\u627E\u5230");
    }
    this.toggleFloatingButton();
  }
  async displayBooks(container, rootFolder) {
    var _a;
    const bookFolders = rootFolder.children.filter((child) => child instanceof import_obsidian7.TFolder);
    for (const folder of bookFolders) {
      const infoFile = folder.children.find((file) => file instanceof import_obsidian7.TFile && file.name === "\u4FE1\u606F.md");
      if (infoFile) {
        try {
          const fileContents = await this.app.vault.read(infoFile);
          const yamlHeader = (_a = fileContents.split("---")[1]) == null ? void 0 : _a.trim();
          const fileYaml = (0, import_obsidian7.parseYaml)(yamlHeader);
          if (fileYaml) {
            const novelFolder = folder.children.find((file) => file instanceof import_obsidian7.TFolder && file.name === "\u5C0F\u8BF4\u6587\u7A3F");
            const storyFile = folder.children.find((file) => file instanceof import_obsidian7.TFile && file.name === "\u5C0F\u8BF4\u6B63\u6587.md");
            if (novelFolder) {
              const totalWordCount = await this.wordCounter.getTotalWordCount(novelFolder);
              this.displayBook(container, folder, fileYaml.type, totalWordCount);
            } else if (storyFile) {
              const totalWordCount = await this.wordCounter.getWordCount(storyFile);
              this.displayBook(container, folder, fileYaml.type, totalWordCount);
            } else {
              new import_obsidian7.Notice(`\u5C0F\u8BF4\u6587\u4EF6\u5939\u672A\u53D1\u73B0 ${folder.name}`);
            }
          }
        } catch (error) {
          new import_obsidian7.Notice("\u89E3\u6790\u4FE1\u606F.md\u6587\u4EF6\u65F6\u51FA\u9519");
        }
      }
    }
  }
  displayBook(container, folder, type, totalWordCount) {
    const bookItem = container.createDiv({ cls: "book-item" });
    bookItem.createEl("div", { cls: "book-title", text: folder.name });
    bookItem.createEl("div", { cls: "book-count", text: `${totalWordCount} \u5B57` });
    bookItem.createEl("div", { cls: "book-type", text: type === "novel" ? "\u957F\u7BC7" : "\u77ED\u7BC7" });
    const deleteButton = bookItem.createEl("div", { text: "\u5220\u9664", cls: "deleteButtonPlus" });
    (0, import_obsidian7.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u7075\u611F";
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(folder);
    });
    bookItem.addEventListener("click", () => {
      this.plugin.setFolderPath(folder.path);
      const novelFolderPath = `${this.plugin.folderPath}/\u5C0F\u8BF4\u6587\u7A3F`;
      const novelFolder = this.app.vault.getAbstractFileByPath(novelFolderPath);
      if (novelFolder instanceof import_obsidian7.TFolder) {
        const latestFile = this.getLatestFile(novelFolder);
        if (latestFile) {
          this.app.workspace.openLinkText(latestFile.path, "", false);
        } else {
          new import_obsidian7.Notice("\u672A\u53D1\u73B0\u6700\u65B0\u6587\u4EF6");
        }
      } else {
        const defaultPath = type === "novel" ? `${this.plugin.folderPath}/\u5C0F\u8BF4\u6587\u7A3F/\u672A\u547D\u540D\u7AE0\u8282.md` : `${this.plugin.folderPath}/\u5C0F\u8BF4\u6B63\u6587.md`;
        this.app.workspace.openLinkText(defaultPath, "", false);
      }
    });
  }
  getLatestFile(folder) {
    let latestFile = null;
    let latestTime = 0;
    const checkFile = (file) => {
      if (file.stat.ctime > latestTime) {
        latestTime = file.stat.ctime;
        latestFile = file;
      }
    };
    const traverseFolder = (folder2) => {
      folder2.children.forEach((child) => {
        if (child instanceof import_obsidian7.TFile) {
          checkFile(child);
        } else if (child instanceof import_obsidian7.TFolder) {
          traverseFolder(child);
        }
      });
    };
    traverseFolder(folder);
    return latestFile;
  }
  confirmDelete(fileOrFolder) {
    const modal = new ConfirmDeleteModal(this.app, fileOrFolder, this, this.refresh.bind(this));
    modal.open();
  }
  async showNewBookModal() {
    const rootFolderPath = "/";
    const folder = this.app.vault.getAbstractFileByPath(rootFolderPath);
    if (folder instanceof import_obsidian7.TFolder) {
      const modal = new NewBookModal(this.app, folder, this, this.refresh.bind(this));
      modal.open();
    } else {
      new import_obsidian7.Notice("\u6839\u6587\u4EF6\u5939\u672A\u627E\u5230");
    }
  }
  async onClose() {
    this.plugin.folderPath = "";
  }
};

// src/view/bookSettingView.ts
var import_obsidian9 = require("obsidian");

// src/model/InspirationModal.ts
var import_obsidian8 = require("obsidian");
var NewInspirationModal = class extends import_obsidian8.Modal {
  constructor(app, folder, view, refreshCallback) {
    super(app);
    this.folder = folder;
    this.view = view;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { cls: "pluginModal", text: "\u6DFB\u52A0\u7075\u611F" });
    const input = new import_obsidian8.TextComponent(contentEl);
    input.setPlaceholder("\u7075\u611F\u6807\u9898");
    const descInputEl = contentEl.createEl("textarea", { cls: "inspiration-textarea" });
    descInputEl.placeholder = "\u7075\u611F\u8BE6\u7EC6\u5185\u5BB9";
    descInputEl.rows = 10;
    descInputEl.style.width = "100%";
    new import_obsidian8.ButtonComponent(contentEl).setButtonText("\u521B\u5EFA").setCta().onClick(async () => {
      const fileName = input.getValue();
      const fileContent = descInputEl.value;
      if (!fileName) {
        new import_obsidian8.Notice("\u7075\u611F\u6807\u9898\u4E0D\u80FD\u4E3A\u7A7A");
        return;
      }
      const filePath = `${this.folder.path}/${fileName}.md`;
      await this.app.vault.create(filePath, fileContent);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/view/bookSettingView.ts
var VIEW_TYPE_BOOK_SETTING = "book-setting";
var BookSettingView = class extends import_obsidian9.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentTab = "\u5927\u7EB2";
    this.currentDisplayedFile = null;
    this.plugin = plugin;
    this.icon = "book-text";
  }
  getViewType() {
    return VIEW_TYPE_BOOK_SETTING;
  }
  getDisplayText() {
    return "\u4E66\u7C4D\u8BBE\u5B9A";
  }
  async onOpen() {
    this.containerEl.empty();
    this.contentContainer = this.containerEl.createDiv({ cls: "setting-content" });
    await this.refresh();
  }
  async refresh() {
    const previousTab = this.currentTab;
    this.containerEl.empty();
    if (!this.plugin.folderPath) {
      await this.showInspiration();
    } else {
      const infoFilePath = `${this.plugin.folderPath}/\u4FE1\u606F.md`;
      const file = this.app.vault.getAbstractFileByPath(infoFilePath);
      if (file instanceof import_obsidian9.TFile) {
        try {
          const yamlHeader = await this.getFileYaml(infoFilePath);
          if ((yamlHeader == null ? void 0 : yamlHeader.type) === "short-story") {
            await this.shortStoryOutline();
          } else {
            this.createSetView();
            this.currentTab = previousTab;
            await this.showViewContent(this.currentTab);
            if (this.currentDisplayedFile) {
              await this.renderFileContent(this.currentDisplayedFile);
            }
          }
        } catch (error) {
          new import_obsidian9.Notice("\u89E3\u6790\u4FE1\u606F.md\u6587\u4EF6\u65F6\u51FA\u9519");
        }
      } else {
        new import_obsidian9.Notice("\u672A\u627E\u5230\u4FE1\u606F.md\u6587\u4EF6\u6216\u6587\u4EF6\u8DEF\u5F84\u4E0D\u6B63\u786E");
      }
    }
  }
  async getFileYaml(filePath) {
    var _a;
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian9.TFile) {
      const fileContents = await this.app.vault.read(file);
      const yamlHeader = (_a = fileContents.split("---")[1]) == null ? void 0 : _a.trim();
      return yamlHeader ? (0, import_obsidian9.parseYaml)(yamlHeader) : null;
    } else {
      new import_obsidian9.Notice("\u6587\u4EF6\u672A\u627E\u5230\u6216\u6587\u4EF6\u8DEF\u5F84\u4E0D\u6B63\u786E");
      return null;
    }
  }
  async shortStoryOutline() {
    const outlineContent = this.containerEl.createEl("div", { cls: "outline-container" });
    const shortStoryOutlinePath = `${this.plugin.folderPath}/\u5927\u7EB2.md`;
    const shortStoryOutline = this.app.vault.getAbstractFileByPath(shortStoryOutlinePath);
    const setContentContainerTitle = outlineContent.createEl("h2", { text: "\u5927\u7EB2", cls: "set-content-title" });
    const modifyButton = setContentContainerTitle.createEl("div", { cls: "modify-button" });
    (0, import_obsidian9.setIcon)(modifyButton, "pencil");
    modifyButton.addEventListener("click", () => {
      this.app.workspace.openLinkText(shortStoryOutlinePath, "", false);
    });
    if (shortStoryOutline instanceof import_obsidian9.TFile) {
      const fileContent = await this.app.vault.read(shortStoryOutline);
      const shortStoryToc = outlineContent.createDiv({ cls: "outline-content" });
      shortStoryToc.empty();
      import_obsidian9.MarkdownRenderer.render(this.app, fileContent, shortStoryToc, shortStoryOutlinePath, this);
    } else {
      new import_obsidian9.Notice("\u5927\u7EB2\u6587\u4EF6\u672A\u627E\u5230");
    }
  }
  async showInspiration() {
    const inspirationPath = "@\u9644\u4EF6/\u7075\u611F";
    const folder = this.app.vault.getAbstractFileByPath(inspirationPath);
    const inspirationTitle = this.containerEl.createEl("h2", { cls: "view-title" });
    inspirationTitle.createEl("span", { text: "\u7075\u611F" });
    const inspirationIcon = inspirationTitle.createEl("span");
    (0, import_obsidian9.setIcon)(inspirationIcon, "plus");
    inspirationIcon.title = "\u6DFB\u52A0\u7075\u611F";
    inspirationIcon.addEventListener("click", (e) => {
      e.stopPropagation();
      this.showNewInspirationModal();
    });
    if (folder instanceof import_obsidian9.TFolder) {
      for (const child of folder.children) {
        if (child instanceof import_obsidian9.TFile) {
          await this.displayInspirationItem(child);
        }
      }
    } else {
      this.contentContainer.createEl("div", { cls: "hint-info", text: "\u672A\u627E\u5230\u7075\u611F\u6587\u4EF6\u5939\u3002" });
    }
  }
  async displayInspirationItem(child) {
    const fileItem = this.containerEl.createEl("div", { cls: "inspiration-item" });
    fileItem.createEl("div", { text: child.name.replace(/\.md$/, ""), cls: "file-title" });
    const deleteButton = fileItem.createEl("div", { cls: "deleteButtonPlus" });
    (0, import_obsidian9.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u7075\u611F";
    const fileContent = await this.app.vault.read(child);
    const snippet = fileContent.split("\n").slice(0, 5).join("\n");
    fileItem.createEl("p", { text: snippet });
    fileItem.addEventListener("click", () => {
      this.app.workspace.openLinkText(child.path, "", false);
    });
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(child);
    });
  }
  async showNewInspirationModal() {
    const inspirationPath = "@\u9644\u4EF6/\u7075\u611F";
    let folder = this.app.vault.getAbstractFileByPath(inspirationPath);
    if (!(folder instanceof import_obsidian9.TFolder)) {
      try {
        await this.app.vault.createFolder(inspirationPath);
        folder = this.app.vault.getAbstractFileByPath(inspirationPath);
      } catch (error) {
        new import_obsidian9.Notice("\u521B\u5EFA\u7075\u611F\u6587\u4EF6\u5939\u65F6\u51FA\u9519");
        return;
      }
    }
    if (folder instanceof import_obsidian9.TFolder) {
      const modal = new NewInspirationModal(this.app, folder, this, this.refresh.bind(this));
      modal.open();
    } else {
      new import_obsidian9.Notice("\u6587\u4EF6\u5939\u672A\u627E\u5230");
    }
  }
  async showViewContent(tabName) {
    this.contentContainer.empty();
    const settingFolderPath = `${this.plugin.folderPath}/\u8BBE\u5B9A/${tabName}`;
    const settingFolder = this.app.vault.getAbstractFileByPath(settingFolderPath);
    if (settingFolder instanceof import_obsidian9.TFolder) {
      this.displayItems(this.contentContainer, settingFolder);
    } else {
      this.contentContainer.createEl("div", { cls: "hint-info", text: `\u672A\u627E\u5230${tabName}\u6587\u4EF6\u5939` });
    }
  }
  createSetView() {
    const setMainContainer = this.containerEl.createDiv({ cls: "set-main-container" });
    this.setContentContainer = setMainContainer.createDiv({ cls: "item-container" });
    const listContainer = setMainContainer.createDiv({ cls: "list-container" });
    const listHeaderContainer = listContainer.createDiv({ cls: "list-container-header" });
    const categoryNameDiv = listHeaderContainer.createEl("div", { cls: "category-input" });
    const inputCategoryName = categoryNameDiv.createEl("input", { placeholder: "\u5206\u7C7B\u540D\u79F0" });
    const listHeaderIcon = listHeaderContainer.createEl("div", { cls: "list-header-icon" });
    (0, import_obsidian9.setIcon)(listHeaderIcon, "plus");
    const listContentContainer = listContainer.createDiv({ cls: "list-container-main" });
    const tabsContainer = setMainContainer.createDiv({ cls: "tabs-container" });
    const tabsTop = tabsContainer.createDiv({ cls: "tabs-top" });
    const tabs = ["\u5927\u7EB2", "\u89D2\u8272", "\u8BBE\u5B9A", "\u7075\u611F"];
    const tabsIcon = ["list", "user-cog", "file-cog", "lightbulb"];
    const tabsArray = [];
    const updateAndDisplayList = async (tabName) => {
      this.currentTab = tabName;
      const currentSettingFolderPath = `${this.plugin.folderPath}/\u8BBE\u5B9A/${tabName}`;
      const currentSettingFolder = this.app.vault.getAbstractFileByPath(currentSettingFolderPath);
      listContentContainer.empty();
      if (currentSettingFolder instanceof import_obsidian9.TFolder) {
        this.displayItems(listContentContainer, currentSettingFolder);
      } else {
        listContentContainer.createEl("div", { cls: "hint-info", text: `${tabName}\u4E0B\u65E0\u6587\u4EF6` });
      }
    };
    listHeaderIcon.addEventListener("click", async () => {
      const newCategoryName = inputCategoryName.value.trim();
      if (newCategoryName) {
        const baseSettingFolderPath = `${this.plugin.folderPath}/\u8BBE\u5B9A`;
        const currentSettingFolderPath = `${baseSettingFolderPath}/${this.currentTab}`;
        const newCategoryPath = `${currentSettingFolderPath}/${newCategoryName}`;
        await createFolderIfNotExists.call(this, baseSettingFolderPath);
        await createFolderIfNotExists.call(this, currentSettingFolderPath);
        await this.app.vault.createFolder(newCategoryPath);
        updateAndDisplayList(this.currentTab);
      } else {
        new import_obsidian9.Notice("\u8BF7\u8F93\u5165\u5206\u7C7B\u540D\u79F0");
      }
    });
    async function createFolderIfNotExists(path) {
      const folder = this.app.vault.getAbstractFileByPath(path);
      if (!(folder instanceof import_obsidian9.TFolder)) {
        const parentPath = path.substring(0, path.lastIndexOf("/"));
        await createFolderIfNotExists.call(this, parentPath);
        await this.app.vault.createFolder(path);
      }
    }
    updateAndDisplayList(this.currentTab);
    tabs.forEach((tabName) => {
      const tab = tabsTop.createEl("div", { cls: "tab-button" });
      tabsArray.push(tab);
      tab.addEventListener("click", async () => {
        await updateAndDisplayList(tabName);
        tabsArray.forEach((t) => t.removeClass("selected"));
        tab.addClass("selected");
        await this.showViewContent(tabName);
      });
      if (tabName === this.currentTab) {
        tab.addClass("selected");
      }
      const tabIcon = tab.createDiv();
      tab.createDiv({ cls: "tab-name", text: tabName });
      (0, import_obsidian9.setIcon)(tabIcon, tabsIcon[tabs.indexOf(tabName)]);
      tab.title = tabName;
    });
  }
  displayItems(container, folder) {
    folder.children.forEach((child) => {
      const childContainer = container.createDiv({ cls: "folder-item" });
      if (child instanceof import_obsidian9.TFile) {
        this.displayFile(childContainer, child);
      } else if (child instanceof import_obsidian9.TFolder) {
        this.displayFolder(childContainer, child);
      }
    });
  }
  displayFolder(container, folder) {
    const folderItem = container.createDiv({ cls: "folder-item" });
    const folderHeader = folderItem.createEl("div", { cls: "folder-header" });
    const folderName = folderHeader.createEl("div", { cls: "folder-name" });
    const folderIcon = folderName.createEl("span");
    (0, import_obsidian9.setIcon)(folderIcon, "folder-open");
    folderName.createSpan({ text: folder.name });
    const tocButton = folderHeader.createEl("div", { cls: "tocButton" });
    const addButton = tocButton.createEl("button");
    (0, import_obsidian9.setIcon)(addButton, "plus");
    addButton.title = "\u6DFB\u52A0";
    addButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.showNewChapterModal(folder);
    });
    const deleteButton = tocButton.createEl("button");
    (0, import_obsidian9.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u5206\u7C7B";
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(folder);
    });
    const fileList = folderItem.createEl("ul", { cls: "file-list" });
    fileList.style.display = "block";
    folderHeader.addEventListener("click", () => {
      fileList.style.display = fileList.style.display === "none" ? "block" : "none";
      (0, import_obsidian9.setIcon)(folderIcon, fileList.style.display === "none" ? "folder-minus" : "folder-open");
    });
    const sortedChildren = folder.children.sort((a, b) => {
      if (a instanceof import_obsidian9.TFile && b instanceof import_obsidian9.TFile) {
        return a.stat.ctime - b.stat.ctime;
      } else if (a instanceof import_obsidian9.TFolder && b instanceof import_obsidian9.TFolder) {
        return a.name.localeCompare(b.name);
      } else if (a instanceof import_obsidian9.TFile) {
        return 1;
      } else {
        return -1;
      }
    });
    sortedChildren.forEach((file) => {
      if (file instanceof import_obsidian9.TFile) {
        this.displayFile(fileList, file);
      } else if (file instanceof import_obsidian9.TFolder) {
        this.displayFolder(fileList.createEl("li"), file);
      }
    });
  }
  async displayFile(container, file) {
    const fileItem = container.createEl("li", { cls: "chapter-title" });
    const fileHeader = fileItem.createEl("div", { cls: "file-header" });
    const fileIcon = fileHeader.createEl("span");
    (0, import_obsidian9.setIcon)(fileIcon, "file-text");
    const fileName = fileHeader.createEl("span");
    fileName.textContent = file.name.replace(/\.md$/, "");
    const deleteButton = fileItem.createEl("button", { cls: "deleteButton" });
    (0, import_obsidian9.setIcon)(deleteButton, "trash");
    deleteButton.title = "\u5220\u9664\u6587\u4EF6";
    deleteButton.addEventListener("click", (e) => {
      e.stopPropagation();
      this.confirmDelete(file);
    });
    fileName.addEventListener("click", async () => {
      this.currentDisplayedFile = file;
      await this.renderFileContent(file);
    });
    fileItem.dataset.path = file.path;
  }
  async renderFileContent(file) {
    const fileContent = await this.app.vault.read(file);
    const setContentContainer = this.setContentContainer;
    setContentContainer.empty();
    const setContentContainerTitle = setContentContainer.createEl("h2", { cls: "set-content-title", text: `${this.currentTab}\u2014\u2014${file.name.replace(/\.md$/, "")}` });
    const setContentContainerMain = setContentContainer.createEl("div", { cls: "set-content-container-main" });
    import_obsidian9.MarkdownRenderer.render(this.app, fileContent, setContentContainerMain, file.path, this);
    const modifyButton = setContentContainerTitle.createEl("div", { cls: "modify-button" });
    (0, import_obsidian9.setIcon)(modifyButton, "pencil");
    modifyButton.addEventListener("click", () => {
      this.app.workspace.openLinkText(file.path, "", false);
    });
  }
  async showNewChapterModal(folder) {
    const modal = new NewChapterModal(this.app, folder, this, "", this.refresh.bind(this));
    modal.open();
  }
  async showNewItemModal(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (folder instanceof import_obsidian9.TFolder) {
      const modal = new NewItemModal(this.app, folder, this, this.refresh.bind(this));
      modal.open();
    } else {
      new import_obsidian9.Notice(`\u6587\u4EF6\u5939\u672A\u53D1\u73B0: ${folderPath}`);
    }
  }
  confirmDelete(fileOrFolder) {
    const modal = new ConfirmDeleteModal(this.app, fileOrFolder, this, this.refresh.bind(this));
    modal.open();
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  name: "",
  picturePath: "",
  countPunctuation: false,
  booksPerRow: 5
};
var MyPluginSettingTab = class extends import_obsidian10.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u63D2\u4EF6\u8BBE\u7F6E" });
    new import_obsidian10.Setting(containerEl).setName("\u59D3\u540D").addText((text) => {
      text.setValue(this.plugin.settings.name).onChange(async (value) => {
        this.plugin.settings.name = value;
        await this.plugin.saveSettings();
        this.plugin.refreshTocView();
      });
    });
    new import_obsidian10.Setting(containerEl).setName("\u5934\u50CF\u56FE\u7247\u8DEF\u5F84").addText((text) => {
      text.setValue(this.plugin.settings.picturePath).onChange(async (value) => {
        this.plugin.settings.picturePath = value;
        await this.plugin.saveSettings();
        this.plugin.refreshTocView();
      });
    });
    new import_obsidian10.Setting(containerEl).setName("\u6807\u70B9\u7B26\u53F7\u8BA1\u6570").setDesc("\u6807\u70B9\u7B26\u53F7\u8BA1\u7B97\u4E3A\u4E00\u4E2A\u5B57\u7B26").addToggle((toggle) => toggle.setValue(this.plugin.settings.countPunctuation).onChange(async (value) => {
      var _a;
      this.plugin.settings.countPunctuation = value;
      await this.plugin.saveSettings();
      const view = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_FILE_LIST)[0]) == null ? void 0 : _a.view;
      if (view instanceof TocView) {
        view.refresh();
      }
    }));
    new import_obsidian10.Setting(containerEl).setName("\u6BCF\u884C\u663E\u793A\u4E66\u7C4D\u6570\u91CF").addText((text) => {
      text.setValue(this.plugin.settings.booksPerRow.toString()).onChange(async (value) => {
        const num = parseInt(value);
        if (!isNaN(num) && num > 0) {
          this.plugin.settings.booksPerRow = num;
          await this.plugin.saveSettings();
          this.plugin.refreshBookshelfView();
        } else {
          new import_obsidian10.Notice("\u8BF7\u8F93\u5165\u4E00\u4E2A\u6709\u6548\u7684\u6B63\u6574\u6570");
        }
      });
    });
  }
};
var MyPlugin = class extends import_obsidian10.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("folder-open", "\u76EE\u5F55", () => {
      this.activateView(VIEW_TYPE_FILE_LIST);
    });
    this.addRibbonIcon("book", "\u4E66\u67B6", () => {
      this.activateView(VIEW_TYPE_BOOKSHELF);
    });
    this.addRibbonIcon("book-text", "\u8BBE\u5B9A", () => {
      this.activateView(VIEW_TYPE_BOOK_SETTING);
    });
    this.registerView(
      VIEW_TYPE_FILE_LIST,
      (leaf) => new TocView(leaf, this)
    );
    this.registerView(
      VIEW_TYPE_BOOKSHELF,
      (leaf) => new BookshelfView(leaf, this)
    );
    this.registerView(
      VIEW_TYPE_BOOK_SETTING,
      (leaf) => new BookSettingView(leaf, this)
    );
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
    this.registerEvent(this.app.vault.on("create", this.handleFileChange.bind(this)));
    this.registerEvent(this.app.vault.on("delete", this.handleFileChange.bind(this)));
    this.folderPath = "";
  }
  handleFileChange(file) {
    var _a, _b, _c;
    const tocView = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_FILE_LIST)[0]) == null ? void 0 : _a.view;
    if (tocView instanceof TocView) {
      tocView.refresh();
    }
    const bookshelfView = (_b = this.app.workspace.getLeavesOfType(VIEW_TYPE_BOOKSHELF)[0]) == null ? void 0 : _b.view;
    if (bookshelfView instanceof BookshelfView) {
      bookshelfView.refresh();
    }
    const booksettingView = (_c = this.app.workspace.getLeavesOfType(VIEW_TYPE_BOOK_SETTING)[0]) == null ? void 0 : _c.view;
    if (booksettingView instanceof BookSettingView) {
      booksettingView.refresh();
    }
  }
  async activateView(viewType) {
    this.app.workspace.detachLeavesOfType(viewType);
    let centerLeaf = this.app.workspace.getMostRecentLeaf();
    if (viewType === VIEW_TYPE_FILE_LIST) {
      centerLeaf = this.app.workspace.getLeftLeaf(false);
    } else if (viewType === VIEW_TYPE_BOOK_SETTING) {
      centerLeaf = this.app.workspace.getRightLeaf(false);
    }
    if (centerLeaf) {
      await centerLeaf.setViewState({
        type: viewType,
        active: true,
        state: { icon: viewType === VIEW_TYPE_FILE_LIST ? "folder-open" : "book" }
      });
      this.app.workspace.revealLeaf(
        this.app.workspace.getLeavesOfType(viewType)[0]
      );
    }
  }
  async setFolderPath(path) {
    this.folderPath = path;
    await this.saveSettings();
    this.refreshTocView();
    this.refreshBookSettingView();
    this.refreshBookshelfView();
  }
  refreshTocView() {
    var _a;
    const tocView = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_FILE_LIST)[0]) == null ? void 0 : _a.view;
    if (tocView) {
      tocView.updateTitle();
      tocView.refresh();
    }
  }
  refreshBookSettingView() {
    var _a;
    const bookSettingView = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_BOOK_SETTING)[0]) == null ? void 0 : _a.view;
    if (bookSettingView) {
      bookSettingView.refresh();
    }
  }
  refreshBookshelfView() {
    var _a;
    const bookshelfView = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE_BOOKSHELF)[0]) == null ? void 0 : _a.view;
    if (bookshelfView) {
      bookshelfView.refresh();
    }
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_FILE_LIST);
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_BOOKSHELF);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
